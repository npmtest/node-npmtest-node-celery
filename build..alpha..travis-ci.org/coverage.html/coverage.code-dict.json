{"/home/travis/build/npmtest/node-npmtest-node-celery/test.js":"/* istanbul instrument in package npmtest_node_celery */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-celery/lib.npmtest_node_celery.js":"/* istanbul instrument in package npmtest_node_celery */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_node_celery = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_node_celery = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-node-celery/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-node-celery && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_node_celery */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_node_celery\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_node_celery.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_node_celery.rollup.js'] =\n            local.assetsDict['/assets.npmtest_node_celery.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_node_celery.__dirname + '/lib.npmtest_node_celery.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-celery/node_modules/node-celery/celery.js":"var url = require('url'),\n    util = require('util'),\n    amqp = require('amqp'),\n    redis = require('redis'),\n    events = require('events'),\n    uuid = require('node-uuid');\n\nvar createMessage = require('./protocol').createMessage;\n\nvar debug = process.env.NODE_CELERY_DEBUG === '1' ? console.info : function() {};\n\nvar supportedProtocols = ['amqp', 'amqps', 'redis'];\nfunction checkProtocol(kind, protocol) {\n    if (supportedProtocols.indexOf(protocol) === -1) {\n        throw new Error(util.format('Unsupported %s type: %s', kind, protocol));\n    }\n}\n\nfunction Configuration(options) {\n    var self = this;\n\n    for (var o in options) {\n        if (options.hasOwnProperty(o)) {\n            self[o.replace(/^CELERY_/, '')] = options[o];\n        }\n    }\n\n    // common\n    self.TASK_RESULT_EXPIRES = self.TASK_RESULT_EXPIRES * 1000 || 86400000; // Default 1 day\n\n    // broker\n    self.BROKER_URL = self.BROKER_URL || 'amqp://';\n    self.BROKER_OPTIONS = self.BROKER_OPTIONS || { url: self.BROKER_URL, heartbeat: 580 };\n    self.DEFAULT_QUEUE = self.DEFAULT_QUEUE || 'celery';\n    self.DEFAULT_EXCHANGE = self.DEFAULT_EXCHANGE || '';\n    self.DEFAULT_EXCHANGE_TYPE = self.DEFAULT_EXCHANGE_TYPE || 'direct';\n    self.DEFAULT_ROUTING_KEY = self.DEFAULT_ROUTING_KEY || 'celery';\n    self.RESULT_EXCHANGE = self.RESULT_EXCHANGE || 'celeryresults';\n    self.IGNORE_RESULT = self.IGNORE_RESULT || false;\n    self.TASK_RESULT_DURABLE = undefined !== self.TASK_RESULT_DURABLE ? self.TASK_RESULT_DURABLE : true; // Set Durable true by default (Celery 3.1.7)\n    self.ROUTES = self.ROUTES || {};\n\n    self.broker_type = url.parse(self.BROKER_URL).protocol.slice(0, -1);\n    if (self.broker_type === 'amqps')\n        self.broker_type = 'amqp';\n    debug('Broker type: ' + self.broker_type);\n    checkProtocol('broker', self.broker_type);\n\n    // backend\n    self.RESULT_BACKEND = self.RESULT_BACKEND || self.BROKER_URL;\n\n    self.backend_type = url.parse(self.RESULT_BACKEND).protocol.slice(0, -1);\n    if (self.backend_type === 'amqps')\n        self.backend_type = 'amqp';\n    debug('Backend type: ' + self.backend_type);\n    checkProtocol('backend', self.backend_type);\n}\n\nfunction RedisBroker(broker_url) {\n    var self = this;\n    var purl = url.parse(broker_url);\n    var database;\n\n    if (purl.pathname) {\n      database = purl.pathname.slice(1);\n    }\n\n    self.redis = redis.createClient(purl.port || 6379,\n                                    purl.hostname || 'localhost');\n\n    if (purl.auth) {\n        debug('Authenticating broker...');\n        self.redis.auth(purl.auth.split(':')[1]);\n        debug('Broker authenticated...');\n    }\n\n    if (database) {\n        self.redis.select(database);\n    }\n\n    self.end = function() {\n        self.redis.end(true);\n    };\n\n    self.disconnect = function() {\n        self.redis.quit();\n    };\n\n    self.redis.on('connect', function() {\n        self.emit('ready');\n    });\n\n    self.redis.on('error', function(err) {\n        self.emit('error', err);\n    });\n\n    self.redis.on('end', function() {\n        self.emit('end');\n    });\n\n    self.publish = function(queue, message, options, callback, id) {\n        var payload = {\n            body: new Buffer(message).toString('base64'),\n            headers: {},\n            'content-type': options.contentType,\n            'content-encoding': options.contentEncoding,\n            properties: {\n                body_encoding: 'base64',\n                correlation_id: id,\n                delivery_info: {\n                    exchange: queue,\n                    priority: 0,\n                    routing_key: queue\n                },\n                delivery_mode: 2, // No idea what this means\n                delivery_tag: uuid.v4(),\n                reply_to: uuid.v4()\n            }\n        };\n        self.redis.lpush(queue, JSON.stringify(payload));\n    };\n\n    return self;\n}\nutil.inherits(RedisBroker, events.EventEmitter);\n\nfunction RedisBackend(conf) {\n    var self = this;\n    var purl = url.parse(conf.RESULT_BACKEND);\n    var database;\n\n    if (purl.pathname) {\n      database = purl.pathname.slice(1);\n    }\n\n    debug('Connecting to backend...');\n    self.redis = redis.createClient(purl.port, purl.hostname);\n    // needed because we'll use `psubscribe`\n    var backend_ex = self.redis.duplicate();\n\n    if (purl.auth) {\n        debug('Authenticating backend...');\n        self.redis.auth(purl.auth.split(':')[1]);\n        debug('Backend authenticated...');\n    }\n\n    if (database) {\n        self.redis.select(database);\n    }\n\n    self.redis.on('error', function(err) {\n        self.emit('error', err);\n    });\n\n    self.redis.on('end', function() {\n        self.emit('end');\n    });\n\n    self.quit = function() {\n        backend_ex.quit();\n        self.redis.quit();\n    };\n\n    // store results to emit event when ready\n    self.results = {};\n\n    // results prefix\n    var key_prefix = 'celery-task-meta-';\n\n    self.redis.on('connect', function() {\n        debug('Backend connected...');\n        // on redis result..\n        self.redis.on('pmessage', function(pattern, channel, data) {\n            backend_ex.expire(channel, conf.TASK_RESULT_EXPIRES / 1000);\n            var message = JSON.parse(data);\n            var taskid = channel.slice(key_prefix.length);\n            if (self.results.hasOwnProperty(taskid)) {\n                var res = self.results[taskid];\n                res.result = message;\n                res.emit('ready', res.result);\n                delete self.results[taskid];\n            } else {\n                // in case of incoming messages where we don't have the result object\n                self.emit('message', message);\n            }\n        });\n        // subscribe to redis results\n        self.redis.psubscribe(key_prefix + '*', () => {\n            self.emit('ready');\n        });\n    });\n\n    self.get = function(taskid, cb) {\n        backend_ex.get(key_prefix + taskid, cb);\n    }\n\n    return self;\n}\nutil.inherits(RedisBackend, events.EventEmitter);\n\nfunction Client(conf) {\n    var self = this;\n    self.ready = false;\n\n    self.conf = new Configuration(conf);\n\n    // backend\n    if (self.conf.backend_type === 'redis') {\n        self.backend = new RedisBackend(self.conf);\n        self.backend.on('message', function(msg) {\n            self.emit('message', msg);\n        });\n    } else if (self.conf.backend_type === 'amqp') {\n        self.backend = amqp.createConnection({\n            url: self.conf.BROKER_URL,\n            heartbeat: 580\n        }, {\n            defaultExchangeName: self.conf.DEFAULT_EXCHANGE\n        });\n    } else if (self.conf.backend_type === self.conf.broker_type) {\n        if (self.conf.backend_type === 'amqp') {\n          self.backend = self.broker;\n        }\n    }\n\n    // backend ready...\n    self.backend.on('ready', function() {\n        debug('Connecting to broker...');\n\n        if (self.conf.broker_type === 'redis') {\n            self.broker = new RedisBroker(self.conf.BROKER_URL);\n        } else if (self.conf.broker_type === 'amqp') {\n            self.broker = amqp.createConnection(self.conf.BROKER_OPTIONS, {\n                defaultExchangeName: self.conf.DEFAULT_EXCHANGE\n            });\n        }\n\n        self.broker.on('error', function(err) {\n            self.emit('error', err);\n        });\n\n        self.broker.on('end', function() {\n            self.emit('end');\n        });\n\n        self.broker.on('ready', function() {\n            debug('Broker connected...');\n            self.ready = true;\n            debug('Emiting connect event...');\n            self.emit('connect');\n        });\n    });\n}\n\nutil.inherits(Client, events.EventEmitter);\n\nClient.prototype.createTask = function(name, options, exchange) {\n    return new Task(this, name, options, exchange);\n};\n\nClient.prototype.end = function() {\n    this.broker.disconnect();\n    if (this.conf.backend_type === 'redis') {\n        this.backend.quit();\n    } else if (this.conf.broker_type !== this.conf.backend_type) {\n        this.backend.quit();\n    }\n};\n\nClient.prototype.call = function(name /*[args], [kwargs], [options], [callback]*/ ) {\n    var args, kwargs, options, callback;\n    for (var i = arguments.length - 1; i > 0; i--) {\n        if (typeof arguments[i] === 'function') {\n            callback = arguments[i];\n        } else if (Array.isArray(arguments[i])) {\n            args = arguments[i];\n        } else if (typeof arguments[i] === 'object') {\n            if (options) {\n                kwargs = arguments[i];\n            } else {\n                options = arguments[i];\n            }\n        }\n    }\n\n    var task = this.createTask(name),\n        result = task.call(args, kwargs, options);\n\n    if (callback && result) {\n        debug('Subscribing to result...');\n        result.on('ready', callback);\n    }\n    return result;\n};\n\nfunction Task(client, name, options, exchange) {\n    var self = this;\n\n    self.client = client;\n    self.name = name;\n    self.options = options || {};\n\n    var route = self.client.conf.ROUTES[name],\n        queue = route && route.queue;\n\n    self.publish = function (args, kwargs, options, callback) {\n        var id = options.id || uuid.v4();\n\n        var result = new Result(id, self.client);\n\n        if (client.conf.backend_type === 'redis') {\n            client.backend.results[result.taskid] = result;\n        }\n\n        queue = options.queue || self.options.queue || queue || self.client.conf.DEFAULT_QUEUE;\n        var msg = createMessage(self.name, args, kwargs, options, id);\n        var pubOptions = {\n            'contentType': 'application/json',\n            'contentEncoding': 'utf-8'\n        };\n\n        if (exchange) {\n            exchange.publish(queue, msg, pubOptions, callback);\n        } else {\n            self.client.broker.publish(queue, msg, pubOptions, callback);\n        }\n\n        return result;\n    };\n}\n\nTask.prototype.call = function(args, kwargs, options, callback) {\n    var self = this;\n\n    args = args || [];\n    kwargs = kwargs || {};\n    options = options || self.options || {};\n\n    if (!self.client.ready) {\n        self.client.emit('error', 'Client is not ready');\n    }\n    else {\n        return self.publish(args, kwargs, options, callback);\n    }\n};\n\nfunction Result(taskid, client) {\n    var self = this;\n\n    events.EventEmitter.call(self);\n    self.taskid = taskid;\n    self.client = client;\n    self.result = null;\n\n    if (self.client.conf.backend_type === 'amqp' && !self.client.conf.IGNORE_RESULT) {\n        debug('Subscribing to result queue...');\n        self.client.backend.queue(\n            self.taskid.replace(/-/g, ''), {\n                \"arguments\": {\n                    'x-expires': self.client.conf.TASK_RESULT_EXPIRES\n                },\n                'durable': self.client.conf.TASK_RESULT_DURABLE,\n                'closeChannelOnUnsubscribe': true\n            },\n\n            function (q) {\n                q.bind(self.client.conf.RESULT_EXCHANGE, '#');\n                var ctag;\n                q.subscribe(function (message) {\n                    if (message.contentType === 'application/x-python-serialize') {\n                        console.error('Celery should be configured with json serializer');\n                        process.exit(1);\n                    }\n                    self.result = message;\n                    q.unsubscribe(ctag);\n                    debug('Emiting ready event...');\n                    self.emit('ready', message);\n                    debug('Emiting task status event...');\n                    self.emit(message.status.toLowerCase(), message);\n                }).addCallback(function(ok) { ctag = ok.consumerTag; });\n            });\n    }\n}\n\nutil.inherits(Result, events.EventEmitter);\n\nResult.prototype.get = function(callback) {\n    var self = this;\n    if (callback && self.result === null) {\n        self.client.backend.get(self.taskid, function(err, reply) {\n            self.result = JSON.parse(reply);\n            callback(self.result);\n        });\n    } else {\n        if (callback) {\n            callback(self.result);\n        }\n        return self.result;\n    }\n};\n\nexports.createClient = function(config, callback) {\n    return new Client(config, callback);\n};\n\nexports.createResult = function(taskId, client) {\n    return new Result(taskId, client);\n};\n","/home/travis/build/npmtest/node-npmtest-node-celery/node_modules/node-celery/protocol.js":"var uuid = require('node-uuid');\n\nvar fields = ['task', 'id', 'args', 'kwargs', 'retries', 'eta', 'expires', 'queue',\n              'taskset', 'chord', 'utc', 'callbacks', 'errbacks', 'timeouts'];\n\n\nfunction formatDate(date) {\n    return new Date(date).toISOString();\n}\n\nfunction createMessage(task, args, kwargs, options, id) {\n    args = args || [];\n    kwargs = kwargs || {};\n\n    var message = {\n        task: task,\n        args: args,\n        kwargs: kwargs\n    };\n\n    message.id = id || uuid.v4();\n    for (var o in options) {\n        if (options.hasOwnProperty(o)) {\n            if (fields.indexOf(o) === -1) {\n                throw \"invalid option: \" + o;\n            }\n            message[o] = options[o];\n        }\n    }\n\n    if (message.eta) {\n        message.eta = formatDate(message.eta);\n    }\n\n    if (message.expires) {\n        message.expires = formatDate(message.expires);\n    }\n\n    return JSON.stringify(message);\n}\n\nexports.createMessage = createMessage;\n","/home/travis/build/npmtest/node-npmtest-node-celery/node_modules/node-celery/benchmarks/pub.js":"process.env.NODE_CELERY_DEBUG = 0;\n\nvar celery = require('../celery'),\n\tutil = require('util');\n\nvar client = celery.createClient({\n\tCELERY_BROKER_URL: 'amqp://'\n});\n\nclient.on('error', function(err) {\n\tconsole.log(err);\n});\n\nvar n = parseInt(process.argv.length > 2 ? process.argv[2] : 1000, 10);\n\nclient.once('connect', function() {\n\tvar start = Date.now();\n\tfor (var i = 0; i < n; i++) {\n\t\tclient.call('tasks.add', [i, i]);\n\t}\n\n\tconsole.log(util.format('Published %d messages in %s milliseconds',\n\tn, Date.now() - start));\n});\n","/home/travis/build/npmtest/node-npmtest-node-celery/node_modules/node-celery/benchmarks/pubsub.js":"process.env.NODE_CELERY_DEBUG = 0;\n\nvar celery = require('../celery'),\n\tutil = require('util');\n\nvar client = celery.createClient({\n\tCELERY_BROKER_URL: 'amqp://',\n\tCELERY_RESULT_BACKEND: 'amqp'\n});\n\nclient.on('error', function(err) {\n\tconsole.log(err);\n});\n\nvar n = parseInt(process.argv.length > 2 ? process.argv[2] : 1000, 10);\n\nclient.once('connect', function() {\n\tvar start = Date.now();\n\tvar j = n;\n\tonresult = function(result) {\n\t\tj--;\n\t\tif (j === 1) {\n\t\t\tconsole.log(util.format('Execued %d tasks in %s milliseconds',\n\t\t\tn, Date.now() - start));\n\t\t\tclient.end();\n\t\t}\n\t};\n\tfor (var i = 0; i < n; i++) {\n\t\tclient.call('tasks.add', [i, i], null, null, onresult);\n\t}\n});\n"}